- content_for(:head) do
  = stylesheet_link_tag 'css/plc', media: 'all'

#courseEnrollment

:ruby
  course_units = []

  enrollment = @user_course_enrollments.first

  enrollment.plc_unit_assignments.each do |unit_enrollment|
    required_module_assignment = unit_enrollment.module_assignment_for_type Plc::LearningModule::REQUIRED_MODULE
    content_module_assignment = unit_enrollment.module_assignment_for_type Plc::LearningModule::CONTENT_MODULE
    practice_module_assignment = unit_enrollment.module_assignment_for_type Plc::LearningModule::PRACTICE_MODULE
    course_unit_info = {}
    unit_status = Hash.new('not_started')
    unit_status['required'] = required_module_assignment.try(:status) || (content_module_assignment.nil?  ? 'not_started' : 'completed')
    unit_status['content'] = content_module_assignment.try(:status) || 'not_started'
    unit_status['practice'] = practice_module_assignment.try(:status) || 'not_started'

    course_unit_info[:status] = unit_status
    course_unit_info[:path] = plc_enrollment_unit_assignment_path(unit_enrollment)
    course_unit_info[:title] = unit_enrollment.plc_course_unit.unit_name

    course_units << course_unit_info
  end

  reactProps = {
    courseTitle: enrollment.plc_course.name,
    courseUnitSections: course_units.each_slice(2).to_a
  }

:javascript
  ReactDOM.render(
    React.createElement(window.dashboard.EnrollmentStatus, #{reactProps.to_json}),
    document.getElementById('courseEnrollment')
  );

  /*
  - if @user_course_enrollments.nil? || @user_course_enrollments.empty?
    %p Hello #{current_user.name}, your future course progress will go here
  - else
    - @user_course_enrollments.each do |user_course_enrollment|
      %h3.course_title
        = user_course_enrollment.plc_course.name
      -# Lame that we have to do this but Firefox doesn't support multiline flexboxes
      - user_course_enrollment.plc_unit_assignments.each_slice(2).to_a.each do |unit_group|
        .course_unit_sections
          - unit_group.each do |unit_enrollment|
            .course_unit_section
              .course_unit_title
                = unit_enrollment.plc_course_unit.unit_name
              - if unit_enrollment.status == Plc::EnrollmentUnitAssignment::START_BLOCKED
                .coming_soon
                  Coming soon!
              - else
                - required_module_assignment = unit_enrollment.module_assignment_for_type Plc::LearningModule::REQUIRED_MODULE
                - content_module_assignment = unit_enrollment.module_assignment_for_type Plc::LearningModule::CONTENT_MODULE
                - practice_module_assignment = unit_enrollment.module_assignment_for_type Plc::LearningModule::PRACTICE_MODULE
                - evaluation_pending = required_module_assignment && content_module_assignment.nil? && practice_module_assignment.nil?
                - unit_overview_status = evaluation_pending ? 'in_progress' : required_module_assignment.try(:status) || 'completed'
                = link_to evaluation_pending ? perform_evaluation_path(unit_enrollment) : plc_enrollment_unit_assignment_path(unit_enrollment) do
                  .module_assignment
                    Overview
                    .ribbon-wrapper
                      .ribbon{class: unit_overview_status}
                = link_to plc_enrollment_unit_assignment_path(unit_enrollment) do
                  .module_assignment
                    Content
                    .ribbon-wrapper
                      .ribbon{class: content_module_assignment.try(:status) || 'not_started'}
                = link_to plc_enrollment_unit_assignment_path(unit_enrollment) do
                  .module_assignment
                    Teaching Practice
                    .ribbon-wrapper
                      .ribbon{class: practice_module_assignment.try(:status) || 'not_started'}
  */
